#!/usr/bin/env perl
use strict;
use File::Spec;
use Data::Dumper;
use List::Util qw(min max);
use List::MoreUtils qw(pairwise);
use File::Temp qw(tempfile);
use File::Basename qw(basename);
use FindBin;
use lib "$FindBin::RealBin/../perl5";
use MLST::PubMLST;
use MLST::Scheme;
use MLST::Logger qw(err msg);
use MLST::Requirements qw(require_exe);
use MLST::FileUtils qw(is_genbank genbank_to_fasta is_gzipped gunzip_file);

#..............................................................................
# Globals

my $VERSION = "2.8";
my $SEP = '/';
my $OUTSEP = "\t";

#..............................................................................
# Command line options

my(@Options, $debug, $quiet, $blastdb, $datadir, $threads, $exclude,
             $list, $longlist, $scheme, 
             $minid, $mincov, $minscore,
             $csv, $nopath, $novel);
setOptions();

#..............................................................................
# Option parsing

MLST::Logger->quiet($quiet);

$OUTSEP = ',' if $csv;  # default is tab

my $pubmlst = MLST::PubMLST->new( dir => $datadir );
my %scheme = (map { ($_->name => $_) } @{$pubmlst->schemes});
my %novel;  # keep track of novel alleles 

# in case user is forcing a scheme on us (legacy mode)
$scheme && ! exists $scheme{$scheme} and err("Invalid --scheme '$scheme'. Check using --list");

if ($list or $longlist) {
  if ($list) { 
    print join( " ", $pubmlst->names ), "\n";
  }
  elsif ($longlist) {
    for my $s (@{ $pubmlst->schemes }) {
      print join( $OUTSEP, $s->name, @{$s->genes} ), "\n";
    }
  }
  exit(0);
}

@ARGV or err("Please provide some FASTA files to determine the MLST of");

require_exe("blastn");

# build a hash of schemes to ignore from the CSV string
my %exclude = map { ($_ => 1) } (split m/,/ , $exclude);
%exclude = () if $scheme;   # don't exclude anything is specific scheme provided
msg("Excluding", scalar(keys %exclude), "schemes:", (keys %exclude));

#..............................................................................
# Output results

# output the header for the old style syntax 
if ($scheme) {
  print join($OUTSEP, qw(FILE SCHEME ST), @{ $scheme{$scheme}->genes } ),"\n";
}

for my $argv (@ARGV) 
{
  my @temp;
  my $infile = $argv;
  
  if ( is_gzipped($argv) ) {
    (undef,$infile) = tempfile(UNLINK=>1);
    msg("Decompressing: $argv'");
    gunzip_file($argv, $infile);
    push @temp, $infile;
  }
  if ( is_genbank($infile) ) {
    my $orig = $infile;
    (undef,$infile) = tempfile(UNLINK=>1);
    msg("Converting to FASTA: $argv");
    genbank_to_fasta($orig, $infile);
    push @temp, $infile;
  }

  msg("Scanning: $argv [$infile]");  

  my($sch, $ST, $sig) = find_mlst($infile);
  $scheme && $sch ne $scheme and err("BUG: got back $sch despite --scheme $scheme");
  
  (undef,undef,$argv) = File::Spec->splitpath($argv) if $nopath;
  my @code = $sch eq '-' ? () : split m{$SEP}, $sig ;
  
  if ($scheme) {
    # old style "one scheme" layout
    print join($OUTSEP, $argv, $sch, $ST, @code),"\n";
  } 
  else {
    # new style "autodetect" layout
    my @gene = $sch eq '-' ? () : @{ $scheme{$sch}->genes };
    my @allele = pairwise { "$a($b)" } @gene, @code;
    print join($OUTSEP, $argv, $sch, $ST, @allele),"\n";
  }
  
  if (@temp) {
    msg("Deleting temporary files: @temp");
    unlink @temp;
  }
}

if ($novel) {
  my $newones = 0;
  open FASTA, '>', $novel;
  for my $seq (keys %novel) {
    next unless $novel{$seq} =~ m/~/;
    print FASTA ">", $novel{$seq}, "\n", $seq, "\n";
    $newones++;
  }
  msg("Found $newones novel intact alleles, wrote them to $novel");
}

#----------------------------------------------------------------------

sub find_mlst {
  my($fname) = @_;
  my $cmd = "blastn -query \Q$fname\E -db \Q$blastdb\E -num_threads $threads"
           ." -ungapped -dust no -word_size 32 -max_target_seqs 10000"
           ." -perc_identity $minid -evalue 1E-20"
           ." -outfmt '6 sseqid slen length nident qseqid qstart qend qseq'";
  msg("Running: $cmd") if $debug;

  my @hit = qx($cmd);
  # FIXME: we should /sort/ the hits here in case logic below is dodgy?
  
  my %res;  # schema => {locus => allele, locus => allele, ...}
  my %feat; # schema => {locus => gff tab-delimited line, ... }
  my $res_count=0;

  foreach (@hit) {
    next unless m/ ^ (\w+)\.(\w+)[_-](\d+) 
                   \t (\d+) \t (\d+) \t (\d+) 
                   \t (\S+) \t (\d+) \t (\d+) \t (\S+) /x;
    my($sch, $gene, $num, $hlen, $alen, $nident, $qid, $qstart, $qend, $qseq) = ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);
    $res_count++;
    msg("[$res_count] $qid:$qstart-$qend| $sch $gene $num | id=$nident/$alen | cov=$alen/$hlen | seq=$qseq") if $debug;

    next unless $nident/$hlen >= $mincov/100 ; # need min-cov to reach minid

    my $strand=($qstart < $qend)?"+":"-";
    my $gffLine=join("\t",$qid, basename($0)."_v$VERSION", "gene", min($qstart,$qend), max($qstart,$qend), sprintf("%0.0f", $nident/$alen), $strand, "ID=MLST_".$gene);

    if ($scheme and $sch ne $scheme) {
      msg("Skipping $sch.$gene.$num allele as user specified --scheme $scheme");
      next;
    }
    if ($exclude{$sch}) {
      msg("Excluding $sch.$gene.$num due to --exclude option");
      next;
    }
    if ($hlen == $alen and $nident == $hlen) {   # need full length 100% hits
      if (exists $res{$sch}{$gene} and $res{$sch}{$gene} !~ m/[~?]/) {
        msg("WARNING: found addtional exact allele match $sch.$gene-$num");
        $res{$sch}{$gene} .= ",$num";
        #$feat{$sch}{$gene}.= $gffLine; # might yield spurious annotations
      }
      else {
        msg("Found exact allele match $sch.$gene-$num");
        $res{$sch}{$gene} = "$num";
        $feat{$sch}{$gene}= $gffLine.";Name=".$gene."_".$num;
      }
      # force update of hash with our exact match (see below for inexact behavior
      $novel{$qseq} = "$sch.$gene-$num $fname";
    }
    else { # either 100% length (with some SNPs) or partial coverage
      my $label = ($alen == $hlen) ? "~$num" : "${num}?";
      $res{$sch}{$gene} ||= $label;
      $feat{$sch}{$gene}||= $gffLine.";Name=".$gene."_".$label;
      if ($novel and $alen==$hlen) {
        # only update hash if we haven't seen a good version yet
        $novel{$qseq} ||= "$sch.$gene$label $fname"; 
      }
    }
  }

  # find the signature with the fewest missing/approximate alleles  
  my @sig = ( [ ($scheme || '-'), '-', join("/", ('-')x7), 0 ] );  # sentinel

  for my $name (keys %res) {
    my $sig = $scheme{$name}->signature_of($res{$name});
    my $ST = $scheme{$name}->sequence_type($sig);
    my $nlocii = $scheme{$name}->num_genes;
    # score is out of 100
    # penalties are given as below for inexact alleles
    my $score = $nlocii;
    $score -= 0.2*($sig =~ tr/~/~/);
    $score -= 0.5*($sig =~ tr/?/?/);
    $score -= 1.0*($sig =~ tr/-/-/);
    $score = int($score * 100 / $nlocii);
    msg("SCORE=$score\t$name\t$ST\t$sig\t($nlocii genes)") if $debug;
    push @sig, [ $name, $ST, $sig, $score ] if $score > $minscore;
  }

  @sig = sort { 
       $b->[3] <=> $a->[3]   # choose highest score
    or $a->[1] <=> $b->[1]   # if same, prefer scheme with 'older' number
  } @sig;
  print STDERR Dumper(@sig) if $debug;

  # take the top scorer
  my @best = @{ $sig[0] };

  makeGff($gff,$feat{$best[0]}) if($gff);

  return @best;
}

#----------------------------------------------------------------------

sub makeGff{
  my($gff,$feat)=@_;

  # Sort by contig, and start site
  my @feat=sort{
    my(@a)=split(/\t/,$a);
    my(@b)=split(/\t/,$b);
    $a[0] cmp $b[0] or
    $a[3] <=> $b[3];
  } values(%$feat);

  open(my $gffFh, ">", $gff) or die "ERROR: could not write to $gff: $!";
  print $gffFh "##gff-version 3\n";
  for my $f(@feat){
    print $gffFh $f."\n";
  }
  close $gffFh;
}

sub show_version {
  my(undef,undef,$exe) = File::Spec->splitpath($0);
  print "$exe $VERSION\n";
  exit(0);
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
<<<<<<< HEAD
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"debug!",  VAR=>\$debug, DEFAULT=>0, DESC=>"Verbose debug output to stderr"},
    {OPT=>"version!",  VAR=>\&show_version, DESC=>"Print version and exit"},
    {OPT=>"quiet!",  VAR=>\$quiet, DEFAULT=>0, DESC=>"Quiet - no stderr output"},
    {OPT=>"blastdb=s",  VAR=>\$blastdb, DEFAULT=>"$FindBin::RealBin/../db/blast/mlst.fa", DESC=>"BLAST database"},
    {OPT=>"datadir=s",  VAR=>\$datadir, DEFAULT=>"$FindBin::RealBin/../db/pubmlst", DESC=>"PubMLST data"},
    {OPT=>"scheme=s",  VAR=>\$scheme, DEFAULT=>'', DESC=>"Don't autodetect, force this scheme on all inputs"},
    {OPT=>"list!",  VAR=>\$list, DEFAULT=>0, DESC=>"List available MLST scheme names"},
    {OPT=>"longlist!",  VAR=>\$longlist, DEFAULT=>0, DESC=>"List allelles for all MLST schemes"},
    {OPT=>"minid=f",  VAR=>\$minid, DEFAULT=>95, DESC=>"DNA %identity of full allelle to consider 'similar' [~]"},
    {OPT=>"mincov=f",  VAR=>\$mincov, DEFAULT=>10, DESC=>"DNA %cov to report partial allele at all [?]"},
    {OPT=>"threads=i",  VAR=>\$threads, DEFAULT=>1, DESC=>"Number of BLAST threads (suggest GNU Parallel instead)"},
    {OPT=>"csv!",  VAR=>\$csv, DEFAULT=>0, DESC=>"Output CSV instead of TSV"},
    {OPT=>"nopath!",  VAR=>\$nopath, DEFAULT=>0, DESC=>"Strip filename paths from FILE column"},
    {OPT=>"novel=s",  VAR=>\$novel, DEFAULT=>'', DESC=>"Save novel alleles to this FASTA file"},
    {OPT=>"gff=s",    VAR=>\$gff,   DEFAULT=>'', DESC=>"Output a GFF file"},
=======
    {OPT=>"help",       VAR=>\&usage,                 DESC=>"This help"},
    {OPT=>"version!",   VAR=>\&show_version,          DESC=>"Print version and exit"},
    {OPT=>"debug!",     VAR=>\$debug,    DEFAULT=>0,  DESC=>"Verbose debug output to stderr"},
    {OPT=>"quiet!",     VAR=>\$quiet,    DEFAULT=>0,  DESC=>"Quiet - no stderr output"},
    {OPT=>"blastdb=s",  VAR=>\$blastdb,  DEFAULT=>"$FindBin::RealBin/../db/blast/mlst.fa", DESC=>"BLAST database"},
    {OPT=>"datadir=s",  VAR=>\$datadir,  DEFAULT=>"$FindBin::RealBin/../db/pubmlst", DESC=>"PubMLST data"},
    {OPT=>"scheme=s",   VAR=>\$scheme,   DEFAULT=>'', DESC=>"Don't autodetect, force this scheme on all inputs"},
    {OPT=>"exclude=s",  VAR=>\$exclude,  DEFAULT=>'ecoli_2,abaumannii', DESC=>"Ignore these schemes (comma sep. list)"},
    {OPT=>"list!",      VAR=>\$list,     DEFAULT=>0,  DESC=>"List available MLST scheme names"},
    {OPT=>"longlist!",  VAR=>\$longlist, DEFAULT=>0,  DESC=>"List allelles for all MLST schemes"},
    {OPT=>"minid=f",    VAR=>\$minid,    DEFAULT=>95, DESC=>"DNA %identity of full allelle to consider 'similar' [~]"},
    {OPT=>"mincov=f",   VAR=>\$mincov,   DEFAULT=>10, DESC=>"DNA %cov to report partial allele at all [?]"},
    {OPT=>"minscore=f", VAR=>\$minscore, DEFAULT=>20, DESC=>"Minumum score out of 100 to match a scheme"},
    {OPT=>"threads=i",  VAR=>\$threads,  DEFAULT=>1,  DESC=>"Number of BLAST threads (suggest GNU Parallel instead)"},
    {OPT=>"csv!",       VAR=>\$csv,      DEFAULT=>0,  DESC=>"Output CSV instead of TSV"},
    {OPT=>"nopath!",    VAR=>\$nopath,   DEFAULT=>0,  DESC=>"Strip filename paths from FILE column"},
    {OPT=>"novel=s",    VAR=>\$novel,    DEFAULT=>'', DESC=>"Save novel alleles to this FASTA file"},
>>>>>>> 39d28d370fbebcd9fe2929a7407f150c1e8ce350
  );

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  print "Usage: $0 [options] <contigs.fa[.gz] | file.gbk[.gz]> ... \n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
